[project]
name = "langchain-graphrag"
version = "0.0.9"
description = "Implementation of GraphRAG (https://arxiv.org/pdf/2404.16130)"
authors = [{ name = "Kapil Sachdeva", email = "notan@email.com" }]
dependencies = [
    "pandas>=2.2.2",
    "networkx>=3.3",
    "langchain-core>=0.3.0",
    "langchain-text-splitters>=0.3.0",
    "graspologic>=3.4.1",
    "tableprint>=0.9.1"
]
readme = "README.md"
requires-python = ">= 3.10"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.urls]
repository = "https://github.com/dineshkrishna9999/langchain-graphrag.git"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/langchain_graphrag"]


# ===== TEMPLATE VARIABLES (environment-based) =====
[tool.poe.env]
APP_CMD = "python examples/simple-app/app/main.py"
DIRS = "--output-dir tmp --cache-dir tmp/cache"
INPUT = "--input-file examples/input-data/book.txt"
ARTIFACTS = "--artifacts-dir tmp/artifacts_gpt-4o"
AZURE_LLM = "--llm-type azure_openai --llm-model gpt-4o"
AZURE_EMBED = "--embedding-type azure_openai --embedding-model text-embedding-3-large"
OPENAI_LLM = "--llm-type openai --llm-model gpt-4o"
OPENAI_EMBED = "--embedding-type openai --embedding-model text-embedding-3-small"
OLLAMA_LLM = "--llm-type ollama --llm-model llama2"
OLLAMA_EMBED = "--embedding-type ollama --embedding-model llama2"

[tool.poe.tasks]

# ===== INTERNAL TASKS (using template variables) =====

# Basic commands
_app-help = "${APP_CMD} --help"
_indexer-help = "${APP_CMD} indexer --help"
_query-help = "${APP_CMD} query --help"
_indexer-base = "${APP_CMD} indexer index"
_local-search-base = "${APP_CMD} query local-search ${DIRS}"
_global-search-base = "${APP_CMD} query global-search ${DIRS}"
_report = "${APP_CMD} indexer report ${ARTIFACTS}"

# Full configured indexer commands (template composition)
_index-azure = "${APP_CMD} indexer index ${INPUT} ${DIRS} ${AZURE_LLM} ${AZURE_EMBED}"
_index-openai = "${APP_CMD} indexer index ${INPUT} ${DIRS} ${OPENAI_LLM} ${OPENAI_EMBED}"
_index-ollama = "${APP_CMD} indexer index ${INPUT} ${DIRS} ${OLLAMA_LLM} ${OLLAMA_EMBED}"

# Full configured search commands (template composition)
_local-azure = "${APP_CMD} query local-search ${DIRS} ${AZURE_LLM} ${AZURE_EMBED}"
_local-openai = "${APP_CMD} query local-search ${DIRS} ${OPENAI_LLM} ${OPENAI_EMBED}"
_local-ollama = "${APP_CMD} query local-search ${DIRS} ${OLLAMA_LLM} ${OLLAMA_EMBED}"
_global-azure = "${APP_CMD} query global-search ${DIRS} ${AZURE_LLM}"
_global-openai = "${APP_CMD} query global-search ${DIRS} ${OPENAI_LLM}"
_global-ollama = "${APP_CMD} query global-search ${DIRS} ${OLLAMA_LLM}"



# Base app command
simple-app = "${APP_CMD}"

# Help commands  
simple-app-help = { ref = "_app-help" }
simple-app-indexer-help = { ref = "_indexer-help" }
simple-app-query-help = { ref = "_query-help" }

# Basic indexer commands
simple-app-indexer = { ref = "_indexer-base" }

# Indexer with different providers
simple-app-indexer-azure = { ref = "_index-azure" }
simple-app-indexer-openai = { ref = "_index-openai" }
simple-app-indexer-ollama = { ref = "_index-ollama" }

# Report generation
simple-app-report = { ref = "_report" }

# Search commands - basic
simple-app-local-search = { ref = "_local-search-base" }
simple-app-global-search = { ref = "_global-search-base" }

# Search commands with provider configurations
simple-app-local-search-azure = { ref = "_local-azure" }
simple-app-local-search-openai = { ref = "_local-openai" }
simple-app-local-search-ollama = { ref = "_local-ollama" }
simple-app-global-search-azure = { ref = "_global-azure" }
simple-app-global-search-openai = { ref = "_global-openai" }
simple-app-global-search-ollama = { ref = "_global-ollama" }


# Development tasks
test = "pytest"
test-verbose = "pytest -v"
lint = "ruff check"
lint-fix = "ruff check --fix"
format = "ruff format"
format-check = "ruff format --check"
typecheck = "mypy src"
clean = "python -c \"import shutil, os; [shutil.rmtree(d, ignore_errors=True) for d in ['tmp', '__pycache__', '.pytest_cache', '.mypy_cache', '.ruff_cache'] if os.path.exists(d)]\""

# Documentation tasks
docs-serve = "mkdocs serve"
docs-build = "mkdocs build"

# Combined tasks
check = ["lint", "format-check", "typecheck"]
fix = ["lint-fix", "format"]
check-all = ["lint", "format-check", "typecheck"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.2",
    "ipykernel>=6.29.5",
    "mkdocs>=1.6.0",
    "mkdocstrings[python]>=0.25.2",
    "markdown-include>=0.8.1",
    "pre-commit>=3.8.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.1",
    "mkdocs-section-index>=0.3.9",
    "mkdocs-material>=9.5.31",
    "mkdocs-jupyter>=0.24.8",
    "fastparquet>=2024.11.0",
    "langchain-chroma>=0.2.2",
    "langchain-community>=0.3.21",
    "langchain-ollama>=0.3.3",
    "langchain-openai>=0.3.24",
    "mypy>=1.16.1",
    "poethepoet>=0.35.0",
    "pyarrow>=20.0.0",
    "python-dotenv>=1.1.0",
    "ruff>=0.12.0",
    "typer>=0.16.0"
]

[tool.isort]
profile = "black"
